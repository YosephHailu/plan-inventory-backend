extend type Query {
    goodReceives(name: String @like, status: StatusEnum @eq): [GoodReceive] @paginate
    goodReceive(id: ID! @eq): GoodReceive @find
}

extend type Mutation {
    createGoodReceive(input: GoodReceiveCreateInput! @spread): GoodReceive @field(resolver: "GoodReceiveMutation@store")
    updateGoodReceive(input: GoodReceiveUpdateInput! @spread): GoodReceive @update
    deleteGoodReceive(id: ID! @eq): GoodReceive @delete
    checkGoodReceive(id: ID! @eq, input: [GoodReceiveCheckInput]!): GoodReceive @field(resolver: "GoodReceiveMutation@check")
    approveGoodReceive(id: ID! @eq, input: [GoodReceiveApproveInput]!): GoodReceive @field(resolver: "GoodReceiveMutation@approve")

}

input GoodReceiveCheckInput {
    checked_quantity: Float!
    id: ID @rules(apply: ["required", "exists:good_receive_items,id"])
}

input GoodReceiveApproveInput {
    approved_quantity: Float!
    id: ID @rules(apply: ["required", "exists:good_receive_items,id"])
}

input GoodReceiveCreateInput {
    received_date: Date!
    remark: String
    received_by: String!

    vendor_name: String
    vendor_id: String
    purchase_order_no: String
    invoice_no: String
    project: String
    loading_number: String
    where_house_id: ID
    goodReceiveItems: [GoodReceiveItemCreateInput]
}

input GoodReceiveUpdateInput {
    id: ID! @rules(apply: ["required", "exists:good_receives,id"])
    received_date: String!
    remark: String
    received_by: String!
    goodReceiveItems: [GoodReceiveItemCreateInput]
}

type GoodReceive {
    id: ID!
    remark: String
    received_by: String
    status: StatusEnum
    received_date: String
    reference_number: String
    goodReceiveItems: [GoodReceiveItem]
}

enum StatusEnum {
    DRAFT @enum(value: "DRAFT")
    ISSUED @enum(value: "ISSUED")
    PENDING @enum(value: "PENDING")
    CHECKED @enum(value: "CHECKED")
    APPROVED @enum(value: "APPROVED")
    REJECTED @enum(value: "REJECTED")
    COMPLETED @enum(value: "COMPLETED")
}