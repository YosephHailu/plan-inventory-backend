extend type Query {
    goodReceiveItems(name: String @like): [GoodReceiveItem] @paginate
    goodReceiveItem(id: ID! @eq): GoodReceiveItem @find
}

extend type Mutation {
    createGoodReceiveItem(input: GoodReceiveItemCreateInput! @spread): GoodReceiveItem @create
    updateGoodReceiveItem(input: GoodReceiveItemUpdateInput! @spread): GoodReceiveItem @update
    deleteGoodReceiveItem(id: ID! @eq): GoodReceiveItem @delete
}

input GoodReceiveItemCreateInput {
    unit_price: Float!,
    ordered_quantity: Float,
    received_quantity: Float,
    description: String,
    condition: String
    expiry_date: Date
    comment: String
    donor_id: ID,
    item_id: ID!
    condition_id: ID
    unit_of_measurement_id: ID!
}

input GoodReceiveItemUpdateInput {
    id: ID! @rules(apply: ["required", "exists:good_receive_items,id"])
    unit_price: Float!,
    ordered_quantity: Float,
    received_quantity: Float,
    description: String,
    condition: String
    expiry_date: Date
    comment: String
    donor_id: ID,
    item_id: ID!
    condition_id: ID
    unit_of_measurement_id: ID!
}

type GoodReceiveItem {
    id: ID
    unit_price: Float,
    received_quantity: Float,
    checked_quantity: Float
    approved_quantity: Float
    description: String,
    item: Item
    goodReceive: GoodReceive
    unitOfMeasurement: UnitOfMeasurement
    donor: Donor
    expiry_date: Date
    comment: String
    condition: String
}
