extend type Query {
    stockIssues(name: String @like, status: StatusEnum @eq, waybill: Boolean @eq): [StockIssue] @paginate
    stockIssue(id: ID! @eq): StockIssue @find
    stockIssueByRequestId(stock_request_id: ID! @eq): StockIssue @find
}

extend type Mutation {
    createStockIssue(input: StockIssueCreateInput! @spread): StockIssue @field(resolver: "StockIssueMutation@store")
    approveStockIssue(id: ID!, input: [StockIssueApproveInput]!): StockIssue @field(resolver: "StockIssueMutation@approve")
    updateStockIssue(input: StockIssueUpdateInput! @spread): StockIssue @update
    deleteStockIssue(id: ID! @eq): StockIssue @delete
}

input StockIssueApproveInput {
    id: ID!
    approved_quantity: Float!
}

input StockIssueCreateInput {
    transport_mode: String
    date: Date
    transported_by: String
    rate_of_charge: Float
    remark: String
    from: String
    to: String
    waybill: Boolean
    from_where_house_id: ID
    to_where_house_id: ID
    stock_request_id: ID! @rules(apply: ["required", "exists:stock_requests,id"])
}

input StockIssueUpdateInput {
    id: ID! @rules(apply: ["required", "exists:stock_issues,id"])
    transport_mode: String
    date: Date
    transported_by: String
    rate_of_charge: Float
    remark: String
    from: String
    to: String
    waybill: Boolean
    from_where_house_id: ID
    to_where_house_id: ID
    stock_request_id: ID! @rules(apply: ["required", "exists:stock_requests,id"])
}

type StockIssue {
    id: ID
    transport_mode: String
    date: Date
    transported_by: String
    rate_of_charge: Float
    remark: String
    from: String
    to: String
    waybill: Boolean
    stockRequest: StockRequest
    fromWhereHouse: WhereHouse
    toWhereHouse: WhereHouse
    created_at: Date
    createdBy: User
    status: StatusEnum
    stockIssueItems: [StockIssueItem]
}

type StockIssueItem {
    id: ID
    quantity: Float
    description: String
    stockIssue: StockIssue
}

enum StatusEnum {
    DRAFT @enum(value: "DRAFT")
    ISSUED @enum(value: "ISSUED")
    PENDING @enum(value: "PENDING")
    CHECKED @enum(value: "CHECKED")
    APPROVED @enum(value: "APPROVED")
    REJECTED @enum(value: "REJECTED")
    COMPLETED @enum(value: "COMPLETED")
}